---------------------------------------------------------------------------------- 
-- Company:  
-- Engineer:  
--  
-- Create Date:    22:08:03 11/16/2022  
-- Design Name:  
-- Module Name:    univer_shift_reg - Behavioral  
-- Project Name:  
-- Target Devices:  
-- Tool versions:  
-- Description:  
-- 
-- Dependencies:  
-- 
-- Revision:  
-- Revision 0.01 - File Created 
-- Additional Comments:  
-- 
---------------------------------------------------------------------------------- 
library IEEE; 
use IEEE.STD_LOGIC_1164.ALL; 
 
-- Uncomment the following library declaration if using 
-- arithmetic functions with Signed or Unsigned values 
--use IEEE.NUMERIC_STD.ALL; 
 
-- Uncomment the following library declaration if instantiating 
-- any Xilinx primitives in this code. 
--library UNISIM; 
--use UNISIM.VComponents.all; 
 
entity univer_shift_reg is 
    Port ( input : in  STD_LOGIC; 
           load : in  STD_LOGIC_VECTOR (3 downto 0); 
           outp : out  STD_LOGIC_VECTOR (3 downto 0); 
           clk_1 : in  STD_LOGIC; 
           sel : in  STD_LOGIC_VECTOR (1 downto 0); 
           clr_1 : in  STD_LOGIC); 
end univer_shift_reg; 
 
architecture Behavioral of univer_shift_reg is 
component d_and_mux  Port ( in_put : in  STD_LOGIC_VECTOR (3 downto 0); 
               Sel : in  STD_LOGIC_VECTOR (1 downto 0); 
     clk : in STD_LOGIC; 
     clearN : in STD_LOGIC; 
     Outp : out  STD_LOGIC); 
     end component; 
     signal sh_left: STD_LOGIC_VECTOR (2 downto 0); 
     signal sh_right: STD_LOGIC_VECTOR (3 downto 0); 
     signal store: STD_LOGIC_VECTOR (3 downto 0); 
     begin 
     Stage3: d_and_mux 
     PORT MAP (in_put(0) => store(3), 
     in_put(1) => input, 
     in_put(2) => sh_left(2), 
     in_put(3) => load(3), 
     clk => clk_1, 
     Sel => sel, 
     clearN => clr_1, 
     OutP => sh_right(3)); 
     Stage2: d_and_mux 
     PORT MAP (in_put(0) => store(2), 
     in_put(1) => sh_right(3), 
     in_put(2) => sh_left(1),  
     in_put(3) => load(2), 
     clk => clk_1, 
     Sel => sel, 
     clearN => clr_1, 
     OutP => sh_right(2)); 
               Stage1: d_and_mux 
     PORT MAP (in_put(0) => store(1), 
     in_put(1) => sh_right(2), 
     in_put(2) => sh_left(0), 
     in_put(3) => load(1), 
     clk => clk_1,  
     Sel => sel, 
     clearN => clr_1, 
     OutP => sh_right(1)); 
     Stage0: d_and_mux 
     PORT MAP (in_put(0) => store(0),  
     in_put(1) => sh_right(1), 
     in_put(2) => input, 
     in_put(3) => load(0), 
     clk => clk_1, 
     Sel => sel,  
     clearN => clr_1, 
     OutP => sh_right(0));  
     outp(3) <= sh_right(3); 
     store(3) <= sh_right(3); 
     outp(2) <= sh_right(2); 
     store(2) <= sh_right(2); 
     sh_left(2) <= sh_right(2);  
     outp(1) <= sh_right(1);  
     store(1) <= sh_right(1); 
     sh_left(1) <= sh_right(1); 
     outp(0) <= sh_right(0); 
     store(0) <= sh_right(0); 
     sh_left(0) <= sh_right(0);   
 
 
 
 
end Behavioral;
